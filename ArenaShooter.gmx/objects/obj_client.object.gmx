<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Connect the client, setup test variables
//Connect the client
clientSocket = network_create_socket(global.game_server_type);

var server = network_connect(clientSocket, "127.0.0.1", global.game_server_port);
if (server &lt; 0) {
    //Error
    //TODO: Handle more gracefully
    show_message("ERROR - Cannot connect to server, error code: " + string(server));
    game_end();
} else {
    //Connected
}

global.clientSocket = clientSocket;

testObjList = ds_list_create();
testName = "";
testInput = c_black;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup client variables
buff = buffer_create(256, buffer_grow, 1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise Gamepads and Players
players = ds_map_create();

var gp_num = gamepad_get_device_count();
for (var i = 0; i &lt; gp_num; i++) {
    if (gamepad_is_connected(i)) {
        show_debug_message("Gamepad " + string(i) + " is connected.");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//NOTE: This is test code to test the testName variable
if (keyboard_check(vk_left)) {
    x -= 5;
} else if (keyboard_check(vk_right)) {
    x += 5;
}

if (keyboard_check(vk_up)) {
    y -= 5;
} else if (keyboard_check(vk_down)) {
    y += 5;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if data has to be sent to server, send it if it should be

scr_client_sendData();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Connect/disconnect players
var e_type = ds_map_find_value(async_load, "event_type");

var pad_index = ds_map_find_value(async_load, "pad_index");

show_debug_message("event type: " + e_type + "#pad index:" + string(pad_index));

switch (e_type) {
    case "gamepad discovered":
        var player = instance_create(100, 100 + 50 * pad_index, obj_player);
        ds_map_add(players, pad_index, player);
        player.pad_index = pad_index;
        player.is_client = true;
        gamepad_set_axis_deadzone(pad_index, 0.15);
    break;
    case "gamepad lost":
        with (players[? pad_index]) instance_destroy();
        ds_map_delete(players, pad_index);
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var eventid = ds_map_find_value(async_load, "id");

if (eventid == clientSocket) {
    //Handle the data received from the server
    
    var buf = ds_map_find_value(async_load, "buffer");
    
    var command = buffer_read(buf, buffer_u8);
    
    switch (command) {
        case TEST_SEND_DATA:
            testName = buffer_read(buf, buffer_string);
            
            var numTestObjs = buffer_read(buf, buffer_u8);
            ds_list_clear(testObjList);
            for (var i = 0; i &lt; numTestObjs; i++) {
                ds_list_add(testObjList, buffer_read(buf, buffer_s16)); //color
                ds_list_add(testObjList, buffer_read(buf, buffer_s16)); //x
                ds_list_add(testObjList, buffer_read(buf, buffer_s16)); //y
            }
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(x, y, testName);

for (var i = 0; i &lt; ds_list_size(testObjList); i++) {
    draw_set_color(ds_list_find_value(testObjList, i++));
    draw_circle(ds_list_find_value(testObjList, i++), ds_list_find_value(testObjList, i), 5, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Test player input recognised on server
buffer_seek(buff, buffer_seek_start, 0);

buffer_write(buff, buffer_u8, TEST_SEND_DATA);

buffer_write(buff, buffer_s16, vk_space);

buffer_write(buff, buffer_bool, true);

network_send_packet(clientSocket, buff, buffer_tell(buff));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Test player input recognised on server
buffer_seek(buff, buffer_seek_start, 0);

buffer_write(buff, buffer_u8, TEST_SEND_DATA);

buffer_write(buff, buffer_s16, vk_space);

buffer_write(buff, buffer_bool, false);

network_send_packet(clientSocket, buff, buffer_tell(buff));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
