<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create server

//TODO: Move these to the menu object when ready, as there could potentially be more than 1 server object
global.game_server_type = network_socket_tcp;
global.game_server_port = 6510;
global.game_server_maxplayers = 16;

socketList = ds_list_create(); //A list of sockets connected to the server
clientMap = ds_map_create(); //A map of sockets to client data
                             //Client data is a map which links pad_index to player instance on server

server = network_create_server(global.game_server_type, global.game_server_port, global.game_server_maxplayers);
if (server &lt; 0) {
    //Error creating server, abort
    //TODO: Handle this better, because we don't just want to quit, we want to
    //      make this thing create a server no matter what.
    ds_list_destroy(socketList);
    ds_map_destroy(clientMap);
    instance_destroy();
}

//TEMP code to test client drawing
testBuf = buffer_create(256, buffer_grow, 1);
instance_create(100, 100, obj_test);
instance_create(20, 20, obj_test);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup server variables

buff = buffer_create(256, buffer_grow, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Send data to client every step if there is data that needs to be updated

buffer_seek(buff, buffer_seek_start, 0);

buffer_write(buff, buffer_u8, SVR_SEND_GAME_DATA); //Command

buffer_write(buff, buffer_u8, 0); //Placeholder for number of clients data to process

var doSend = false;
var numClients = 0;
var hasAddedClient = false;

//Loop through all players on all different clients,
//check if there is data which needs to be sent to all clients
//if there is, add it to the buffer and send it
var socket = ds_map_find_first(clientMap);
for (var iSocket = 0; iSocket &lt; ds_map_size(clientMap); iSocket++) {
    var playerMap = ds_map_find_value(clientMap, socket);
    
    // Loop through playerMap for this client
    var pad_index = ds_map_find_first(playerMap);
    var numPlayers = 0;
    var placeholderOffset_numPlayers = -1;
    
    hasAddedClient = false;
    
    for (var iPadIdx = 0; iPadIdx &lt; ds_map_size(playerMap); iPadIdx++) {
        var player = ds_map_find_value(playerMap, pad_index);
        
        //Check if data should be sent to client, if so, add data to buffer
        if (scr_server_checkSendPlayerData(player)) {
            if (!hasAddedClient) {
                doSend = true;
                numClients++;
                hasAddedClient = true;
                
                buffer_write(buff, buffer_u8, socket); //Client socket data
                placeholderOffset_numPlayers = buffer_tell(buff);
                buffer_write(buff, buffer_u8, 0); //number of players placeholder
            }
            numPlayers++;
            buffer_write(buff, buffer_u8, pad_index);
            buffer_write(buff, buffer_f32, player.speed);
            buffer_write(buff, buffer_f32, player.direction);
        }
        
        //Add in number of players placeholder for this client
        if (hasAddedClient) buffer_poke(buff, placeholderOffset_numPlayers, buffer_u8, numPlayers);
        
        ds_map_find_next(playerMap, pad_index);
    }
    
    ds_map_find_next(clientMap, socket);
}

if (doSend) {
    //bufferSize is set here so that we send only data relevant to this script call,
    //as the buffer can be bigger than this as we keep writing to it on and off
    //throughout the existance of this client instance
    var bufferSize = buffer_tell(buff);
    
    //Write the number of players in it's position
    buffer_poke(buff, 1, buffer_u8, numClients);
    
    for (var i = 0; i &lt; ds_list_size(socketList); i++) {
        network_send_packet(ds_list_find_value(socketList, i), buff, bufferSize);
    }
}

//OLD TEST DATA, REMOVE WHEN NOT NEDED
/*
testBuf = buffer_create(256, buffer_grow, 1);
global.testBuf = testBuf;

buffer_seek(testBuf, buffer_seek_start, 0);

//Constant value tells the client how to process the data
buffer_write(testBuf, buffer_u8, TEST_SEND_DATA); 
//data to process
buffer_write(testBuf, buffer_string, "testing");

//write test object data
buffer_write(testBuf, buffer_u8, instance_number(obj_test));
with (obj_test) {
    buffer_write(global.testBuf, buffer_s16, color);
    buffer_write(global.testBuf, buffer_s16, x);
    buffer_write(global.testBuf, buffer_s16, y);
}

//Send data to clients
var bufSize = buffer_tell(testBuf);
for (var i = 0; i &lt; ds_list_size(socketList); i++) {
    network_send_packet(ds_list_find_value(socketList, i), testBuf, bufSize);
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle incoming network data
var eventid = ds_map_find_value(async_load, "id"); //EventID is the socket ID in this case

if (eventid == server) {
    //This means we have a client connecting/disconnecting
    scr_server_connectDisconnect();
} else if (eventid == global.clientSocket) {
    //The client which is running the server, do nothing
} else {
    //All other clients, which means we have received data
    scr_server_receivedData();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
