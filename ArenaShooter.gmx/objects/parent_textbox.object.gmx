<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup vars
isHovering = false;
isSelected = false;

placeholder = "";
text = "";
width = 0;
height = 0;
padding = 4;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cursor vars
csrOn = true;
csrCounter = 0;
csrTime = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse enter / leave
var mX = mouse_x;
var mY = mouse_y;

if (isHovering) {
    if (mX &lt; x || mY &lt; y || mX &gt; x + width || mY &gt; y + height) {
        isHovering = false;
        window_set_cursor(cr_default);
        event_perform(ev_mouse, ev_mouse_leave);
    }
} else {
    if (mX &gt; x) {
        if (mY &gt; y) {
            if (mX &lt; x + width) {
                if (mY &lt; y + height) {
                    isHovering = true;
                    window_set_cursor(cr_drag);
                    event_perform(ev_mouse, ev_mouse_enter);
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>parent_textbox</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clicking code
if (isHovering) {
    if (mouse_check_button_pressed(mb_left)) {
        event_perform(ev_mouse, ev_left_press);
    } else if (mouse_check_button(mb_left)) {
        event_perform(ev_mouse, ev_left_button);
    } else if (mouse_check_button_released(mb_left)) {
        event_perform(ev_mouse, ev_left_release);
        isSelected = true;
        
        keyboard_string = text;
    }
} else {
    if (mouse_check_button_released(mb_left)) {
        isSelected = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keyboard input
if (isSelected) {
    if (keyboard_check_released(vk_anykey)) {
        text = keyboard_string;
        csrOn = true;
        csrCounter = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draws the textbox
if (isHovering) draw_set_color(c_black);
else draw_set_color(c_dkgray);

draw_rectangle(x-padding, y-padding, x+width+padding, y+height+padding, false);
draw_set_color(c_white);
draw_rectangle(x, y, x + width, y + height, false);

draw_set_text_standard();
if (string_length(text) != 0) {
    //Draw text
    draw_set_color(c_black);
    draw_text(x, y, text);
    
    //Draw the cursor
    if (isSelected) {
        if (csrOn) {
            var cursorX, cursorH;
            
            cursorH = string_height("H"); //Just the height of any random letter
            if (string_length(text) == 0) {
                cursorX = x;
            } else {
                cursorX = string_width(text) + x;
            }
            
            draw_line(cursorX, y, cursorX, y + cursorH);
        }
        
        csrCounter++;
        if (csrCounter &gt; csrTime) {
            csrOn = !csrOn;
            csrCounter = 0;
        }
    }
} else if (!isSelected) {
    //Draw placeholder
    draw_set_color(c_dkgray);
    draw_text(x, y, placeholder);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
